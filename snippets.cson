# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     ''body'': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
'.js':
  # Console snippets
  'Console log':
    'prefix': 'clog'
    'body': 'console.log($1);'
  'Console dir':
    'prefix': 'cdir'
    'body': 'console.dir($1, null);'
  'Here':
    'prefix': 'here'
    'body': 'console.log(\'HERE\');'
  'Decorative console log':
    'prefix': 'decor'
    'body': """
      console.log('************************************');
      console.log(${1});
      console.log('************************************');
    """
  'Green console':
    'prefix': 'green'
    'body': 'console.log(\'%c $1\', \'color: green; font-weight: bold;\');'
  'Red console':
    'prefix': 'red'
    'body': 'console.log(\'%c $1\', \'color: red; font-weight: bold;\');'
  'Blue console':
    'prefix': 'blue'
    'body': 'console.log(\'%c $1\', \'color: blue; font-weight: bold;\');'
  'Console table':
    'prefix': 'ctab'
    'body': 'console.table($1);'

  # Function snippets
  'Named function':
    'prefix': 'funcn'
    'body': 'function $1($2) {\n\t${3}\n}'
  'Anonymous function':
    'prefix': 'funca'
    'body': 'function($2) {\n\t${3}\n}'
  'Arrow function':
    'prefix': 'ar1'
    'body': '($1) => {\n\t${2}\n}'
  'Arrow function no parentheses':
    'prefix': 'ar2'
    'body': '$1 => {\n\t${2}\n}'
  'Self executing anonymous function':
    'prefix': 'anon'
    'body': """
      (function($2){
        $3
      })($1);
    """
  'React component':
    'prefix': 'comp'
    'body': """
      import React, {PropTypes}  from 'react';

      class $1 extends React.Component {
        static propTypes = {

        }

        render() {
          return (
            <div></div>
          );
        }
      }

      export default $1;
      """
  'React stateless component':
    'prefix': 'comps'
    'body': """
      import React, {PropTypes} from 'react';

      const $1 = ({$2}) => {
        return (
          $3
        );
      };

      $1.propTypes = {
        $4
      };

      export default $1;
      """
  'React: componentDidMount: fn() { ... }':
    'prefix': 'cdm'
    'body': 'componentDidMount: function() {\n\t${1}\n},'

  'React: componentDidUpdate: fn(pp, ps) { ... }':
    'prefix': 'cdup'
    'body': 'componentDidUpdate: function(prevProps, prevState) {\n\t${1}\n},'

  'React: componentWillMount: fn() { ... }':
    'prefix': 'cwm'
    'body': 'componentWillMount: function() {\n\t${1}\n},'

  'React: componentWillReceiveProps: fn(np) { ... }':
    'prefix': 'cwr'
    'body': 'componentWillReceiveProps: function(nextProps) {\n\t${1}\n},'

  'React: componentWillUnmount: fn() { ... }':
    'prefix': 'cwun'
    'body': 'componentWillUnmount: function() {\n\t${1}\n},'

  'React: componentWillUpdate: fn(np, ns) { ... }':
    'prefix': 'cwu'
    'body': 'componentWillUpdate: function(nextProps, nextState) {\n\t${1}\n},'

  'React: cx({ ... })':
    'prefix': 'cx'
    'body': 'cx({\n\t$1: $2\n});'

  'React: forceUpdate(...)':
    'prefix': 'fup'
    'body': 'forceUpdate(${1:callback});'

  'React: getDefaultProps: fn() { return {...} } ':
    'prefix': 'gdp'
    'body': 'getDefaultProps: function() {\n\treturn {\n\t\t${1}\n\t};\n},'

  'React: getInitialState: fn() { return {...} } ':
    'prefix': 'gis'
    'body': """
      getInitialState: function() {\n\treturn {\n\t\t${1}: ${2}\n\t};\n},
      """
  'React: isMounted()':
    'prefix': 'ism'
    'body': 'isMounted()'

  'React: propTypes { ... }':
    'prefix': 'pt'
    'body': 'propTypes: {\n\t${1}: React.PropTypes.${2:string}\n},'

  'React: render: fn() { return ... }':
    'prefix': 'ren'
    'body': 'render: function() {\n\treturn (\n\t\t${1:<div />}\n\t);\n}'

  'React: setState({ ... })':
    'prefix': 'sst'
    'body': 'setState({\n\t${1}: ${2}\n});'

  'React: this.props.':
    'prefix': 'props'
    'body': 'this.props.${1}'

  'React: this.state.':
    'prefix': 'state'
    'body': 'this.state.${1}'

  'React: componentDidMount() { ... } (ES6)':
    'prefix': 'cdm6'
    'body': 'componentDidMount() {\n\t${1}\n}'

  'React: componentDidUpdate(pp, ps) { ... } (ES6)':
    'prefix': 'cdup6'
    'body': 'componentDidUpdate(prevProps, prevState) {\n\t${1}\n}'

  'React: componentWillMount() { ... } (ES6)':
    'prefix': 'cwm6'
    'body': 'componentWillMount() {\n\t${1}\n}'

  'React: componentWillReceiveProps(np) { ... } (ES6)':
    'prefix': 'cwr6'
    'body': 'componentWillReceiveProps(nextProps) {\n\t${1}\n}'

  'React: componentWillUnmount() { ... } (ES6)':
    'prefix': 'cwun6'
    'body': 'componentWillUnmount() {\n\t${1}\n}'

  'React: componentWillUpdate(np, ns) { ... } (ES6)':
    'prefix': 'cwu6'
    'body': 'componentWillUpdate(nextProps, nextState) {\n\t${1}\n}'

  'React: static defaultProps = { ... }':
    'prefix': 'dp'
    'body': 'static defaultProps = {\n\t${1}\n};'

  'React: this.state = { ... }':
    'prefix': 'is'
    'body': 'this.state = {\n\t${1}: ${2}\n}'

  'React: static propTypes = { ... } (ES6)':
    'prefix': 'pt6'
    'body': 'static propTypes = {\n\t${1}: React.PropTypes.${2:string}\n};'

  'React: render() { return ... } (ES6)':
    'prefix': 'ren6'
    'body': 'render() {\n\treturn (\n\t\t${1:<div />}\n\t);\n}'

  'React: setState({ ... }) (ES6)':
    'prefix': 'sst6'
    'body': 'this.setState({\n\t${1}: ${2}\n});'

  'React: shouldComponentUpdate(np, ns) { ... } (ES6)':
    'prefix': 'scu6'
    'body': 'shouldComponentUpdate(nextProps, nextState) {\n\t${1}\n}'

  'React: const { props: { ... } } = this (ES6)':
    'prefix': 'props6'
    'body': 'const { props: { ${1} } } = this'

  'PropTypes.func.isRequired':
    'prefix': 'ptf'
    'body': 'PropTypes.func.isRequired'

  'PropTypes.string.isRequired':
    'prefix': 'pts'
    'body': 'PropTypes.string.isRequired'

  'PropTypes.object.isRequired':
    'prefix': 'pto'
    'body': 'PropTypes.object.isRequired'

  'PropTypes.array.isRequired':
    'prefix': 'pta'
    'body': 'PropTypes.array.isRequired'

  'PropTypes.bool.isRequired':
    'prefix': 'ptb'
    'body': 'PropTypes.bool.isRequired'

  'PropTypes.number.isRequired':
    'prefix': 'ptn'
    'body': 'PropTypes.number.isRequired'

  'PropTypes.node.isRequired':
    'prefix': 'ptnode'
    'body': 'PropTypes.node.isRequired'

  'PropTypes.element.isRequired':
    'prefix': 'pte'
    'body': 'PropTypes.element.isRequired'

  'PropTypes.any.isRequired':
    'prefix': 'ptany'
    'body': 'PropTypes.any.isRequired'

  'PropTypes.shape({...}).isRequired':
    'prefix': 'ptshape'
    'body': 'PropTypes.shape({ $1: $2 }).isRequired'
